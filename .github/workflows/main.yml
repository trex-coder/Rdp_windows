name: CI

on: [push, workflow_dispatch]

jobs:
  build:
    runs-on: macos-latest

    steps:
    - name: Enable Remote Management and Screen Sharing
      run: |
        echo "Enabling Remote Management..."
        sudo /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart \
          -activate -configure -access -on -users runneradmin -privs -all
        sudo /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart \
          -configure -allowAccessFor -allUsers
        echo "Remote Management enabled successfully."

    - name: Configure VNC Password Authentication
      run: |
        echo "Setting up VNC password authentication..."
        sudo defaults write /Library/Preferences/com.apple.RemoteManagement VNCAlwaysStartOnConsole -bool true
        sudo /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart \
          -configure -clientopts -setvnclegacy -vnclegacy yes \
          -clientopts -setvncpw -vncpw P@ssw0rd!
        sudo /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart -restart
        echo "VNC password authentication configured successfully."

    - name: Allow VNC Through Firewall
      run: |
        echo "Allowing VNC through firewall..."
        sudo /usr/libexec/ApplicationFirewall/socketfilterfw --add /System/Library/CoreServices/RemoteManagement/ARDAgent.app
        sudo /usr/libexec/ApplicationFirewall/socketfilterfw --unblockapp /System/Library/CoreServices/RemoteManagement/ARDAgent.app
        echo "Firewall configured for VNC access."

    - name: Force macOS to Render Desktop
      run: |
        echo "Forcing macOS to render the desktop..."
        trap '' SIGTERM  # Ignore termination signals during this step
        sudo defaults write /Library/Preferences/com.apple.windowserver DisplayCreateFakeDisplay -bool true
        sudo killall -HUP WindowServer
        sleep 3  # Allow time for WindowServer to restart
        osascript -e 'tell application "System Events" to keystroke "r"'
        echo "macOS display rendering forced."

    - name: Download and Configure ngrok
      run: |
        echo "Downloading ngrok..."
        curl -s https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-darwin-amd64.zip -o ngrok.zip
        unzip ngrok.zip
        echo "Starting ngrok for VNC (Port 5900)..."
        ./ngrok authtoken $NGROK_AUTH_TOKEN
        ./ngrok tcp 5900 > ngrok.log &
        echo "ngrok configured successfully."
      env:
        NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}

    - name: Output ngrok Tunnel Information
      run: |
        echo "Fetching ngrok tunnel information..."
        sleep 5  # Wait for ngrok to initialize
        cat ngrok.log | grep "tcp://" || echo "Ngrok tunnel not established."
        echo "Ngrok tunnel details displayed."

    - name: Verify VNC Service
      run: |
        echo "Verifying VNC service on port 5900..."
        netstat -an | grep 5900 || echo "VNC port not active. Check Remote Management setup."
        echo "VNC service verification completed."

    - name: Keep Workflow Active for 10 Hours
      run: |
        echo "Keeping the workflow active for 10 hours..."
        trap '' SIGTERM  # Prevent termination
        SECONDS=0
        MAX_SECONDS=$((10 * 3600))  # 10 hours

        while [ $SECONDS -lt $MAX_SECONDS ]; do
          echo "Workflow active for $SECONDS seconds..."
          sleep 60  # Sleep in 1-minute increments
        done
        echo "10-hour session completed."
