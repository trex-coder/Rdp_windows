name: CI

on: [push, workflow_dispatch]

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Download ngrok
      run: Invoke-WebRequest https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip -OutFile ngrok.zip

    - name: Extract ngrok
      run: Expand-Archive ngrok.zip

    - name: Authenticate ngrok
      run: .\ngrok\ngrok.exe authtoken $Env:NGROK_AUTH_TOKEN
      env:
        NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}

    - name: Enable Terminal Services
      run: Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -name "fDenyTSConnections" -Value 0

    - name: Enable Remote Desktop Firewall Rule
      run: Enable-NetFirewallRule -DisplayGroup "Remote Desktop"

    - name: Configure RDP User Authentication
      run: Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "UserAuthentication" -Value 1

    - name: Set Local User Password
      run: Set-LocalUser -Name "runneradmin" -Password (ConvertTo-SecureString -AsPlainText "P@ssw0rd!" -Force)

    - name: Start ngrok Tunnel
      run: Start-Process -NoNewWindow -FilePath .\ngrok\ngrok.exe -ArgumentList "tcp 3389" -RedirectStandardOutput ngrok.log -RedirectStandardError ngrok.err -PassThru

    - name: Fetch ngrok Endpoint
      run: |
        $maxRetries = 10
        $retryCount = 0
        $ngrokUrl = ""
        while ($retryCount -lt $maxRetries -and $ngrokUrl -eq "") {
          Start-Sleep -Seconds 10
          try {
            $ngrokTunnel = Invoke-RestMethod http://127.0.0.1:4040/api/tunnels
            $ngrokUrl = $ngrokTunnel.tunnels[0].public_url
          } catch {
            Write-Host "ngrok API not available yet. Retrying..."
          }
          $retryCount++
        }
        if ($ngrokUrl -eq "") {
          Write-Host "Failed to retrieve ngrok URL after $maxRetries attempts."
          exit 1
        } else {
          Write-Host "ngrok public URL: $ngrokUrl"
          $ngrokUrl = $ngrokUrl.Replace("tcp://", "")
          Write-Host "ngrok public URL without tcp://: $ngrokUrl"
          echo $ngrokUrl > ngrok_url.txt
        }
      id: fetch_ngrok_endpoint

    - name: Save ngrok endpoint to file
      run: |
        $ngrokUrl = Get-Content ngrok_url.txt
        $htmlContent = @"
        <!DOCTYPE html>
        <html>
        <head>
          <title>ngrok Endpoint</title>
        </head>
        <body>
          <p>ngrok public URL: $ngrokUrl</p>
        </body>
        </html>
        "@
        $htmlContent | Out-File -FilePath ngrok_endpoint.html

    - name: Deploy to Vercel
      env:
        VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      run: |
        npm install -g vercel
        vercel --token $VERCEL_TOKEN --org-id $VERCEL_ORG_ID --project-id $VERCEL_PROJECT_ID --prod

    - name: Upload HTML file to Vercel
      run: |
        vercel --token ${{ secrets.VERCEL_TOKEN }} --prod --confirm
        $endTime = (Get-Date).AddHours(7)
        $webhookUrl = $Env:DISCORD_WEBHOOK_URL
        while ((Get-Date) -lt $endTime) {
          try {
            $ngrokUrl = Get-Content ngrok_url.txt
            Write-Host "ngrok public URL: $ngrokUrl"
            $randomCode = -join ((48..57) + (65..90) + (97..122) | Get-Random -Count 9 | % {[char]$_})
            Write-Host "Random Code: $randomCode"
            $payload = @{
              content = "ngrok public URL: $ngrokUrl`nRandom Code: $randomCode"
            } | ConvertTo-Json
            Invoke-RestMethod -Uri $webhookUrl -Method Post -Body $payload -ContentType 'application/json'
          } catch {
            Write-Host "Failed to fetch ngrok endpoint or send to webhook."
          }
          Start-Sleep -Seconds 60 # Wait for a minute before checking again
        }
        Write-Host "The 7-hour period has ended."
      env:
        DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
