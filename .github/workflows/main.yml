name: CI

on: [push, workflow_dispatch]

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Download ngrok
      run: Invoke-WebRequest https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip -OutFile ngrok.zip

    - name: Extract ngrok
      run: Expand-Archive ngrok.zip

    - name: Download Reemo Desktop Streaming App
      run: Invoke-WebRequest https://download.reemo.io/reemo.setup.x64.exe -OutFile reemo.setup.x64.exe

    - name: Install Reemo Desktop Streaming App
      run: .\reemo.setup.x64.exe /SILENT

    - name: Verify Reemo Installation
      run: |
        if (Test-Path "C:\Program Files\Reemo\Reemo.exe") {
          Write-Host "Reemo installed successfully"
        } else {
          Write-Error "Reemo installation failed"
        }

    - name: Authenticate and Start Reemo
      run: |
        $reemoPath = "C:\Program Files\Reemo\Reemo.exe"
        if (Test-Path $reemoPath) {
          Write-Host "Reemo path exists"
          Start-Process -NoNewWindow -FilePath $reemoPath -ArgumentList "--key $Env:REEMO_PERSONAL_KEY" -PassThru | Out-Null
          Start-Sleep -Seconds 10 # Give Reemo a few seconds to start
          if (Get-Process -Name Reemo -ErrorAction SilentlyContinue) {
            Write-Host "Reemo started successfully"
          } else {
            Write-Error "Reemo failed to start"
          }
        } else {
          Write-Error "Reemo path does not exist"
        }
      env:
        REEMO_PERSONAL_KEY: ${{ secrets.REEMO_PERSONAL_KEY }}

    - name: Authenticate ngrok
      run: .\ngrok\ngrok.exe authtoken $Env:NGROK_AUTH_TOKEN
      env:
        NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}

    - name: Enable Terminal Services
      run: Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -name "fDenyTSConnections" -Value 0

    - name: Enable Remote Desktop Firewall Rule
      run: Enable-NetFirewallRule -DisplayGroup "Remote Desktop"

    - name: Configure RDP User Authentication
      run: Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "UserAuthentication" -Value 1

    - name: Set Local User Password
      run: Set-LocalUser -Name "runneradmin" -Password (ConvertTo-SecureString -AsPlainText "P@ssw0rd!" -Force)

    - name: Download Steam Installer
      run: Invoke-WebRequest https://steamcdn-a.akamaihd.net/client/installer/SteamSetup.exe -OutFile SteamSetup.exe

    - name: Install Steam
      run: .\SteamSetup.exe /SILENT

    - name: Configure Auto Login Script
      run: |
        $steamLoginScript = @"
        Add-Type -AssemblyName System.Web
        $username = "gauravjackson"
        $password = "Bluehouse079@@@"
        $base64AuthInfo = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes("${username}:${password}"))
        $env:STEAM_LOGIN = $base64AuthInfo
        Start-Process -FilePath "C:\Program Files (x86)\Steam\Steam.exe" -ArgumentList "-login ${username} ${password}"
        "@
        Set-Content -Path "C:\steam-login.ps1" -Value $steamLoginScript

    - name: Execute Auto Login Script
      run: powershell.exe -File C:\steam-login.ps1

    - name: Create ngrok Tunnel and Fetch Endpoint
      run: |
        Start-Process -NoNewWindow -FilePath .\ngrok\ngrok.exe -ArgumentList "tcp 3389" -PassThru
        Start-Sleep -Seconds 10 # Give ngrok a few seconds to start
        $endTime = (Get-Date).AddHours(7)
        $webhookUrl = $Env:DISCORD_WEBHOOK_URL
        while ((Get-Date) -lt $endTime) {
          try {
            $response = Invoke-RestMethod http://127.0.0.1:4040/api/tunnels
            $endpoint = $response.tunnels[0].public_url
            Write-Host "ngrok public URL: $endpoint"
            $randomCode = -join ((48..57) + (65..90) + (97..122) | Get-Random -Count 9 | % {[char]$_})
            Write-Host "Random Code: $randomCode"
            $payload = @{
              content = "ngrok public URL: $endpoint`nRandom Code: $randomCode"
            } | ConvertTo-Json
            Invoke-RestMethod -Uri $webhookUrl -Method Post -Body $payload -ContentType 'application/json'

            # Send the endpoint to Render to deploy as a web service
            $renderPayload = @{
              name = "ngrok-endpoint-service"
              envVars = @{
                "NGROK_ENDPOINT" = $endpoint
              }
            } | ConvertTo-Json
            $renderResponse = Invoke-RestMethod -Uri "https://api.render.com/v1/services" -Method Post -Headers @{
              "Authorization" = "Bearer $Env:RENDER_API_KEY"
              "Content-Type" = "application/json"
            } -Body $renderPayload

            Write-Host "Render API Response: $renderResponse"
          } catch {
            Write-Host "Failed to fetch ngrok endpoint or send to webhook/Render. Error: $_"
          }
          Start-Sleep -Seconds 60 # Wait for a minute before checking again
        }
        Write-Host "The 7-hour period has ended."
      env:
        DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
