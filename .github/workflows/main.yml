name: CI

on: [push, workflow_dispatch]

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Download ngrok
      run: Invoke-WebRequest https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip -OutFile ngrok.zip

    - name: Extract ngrok
      run: Expand-Archive ngrok.zip

    - name: Authenticate ngrok
      run: .\ngrok\ngrok.exe authtoken $Env:NGROK_AUTH_TOKEN
      env:
        NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}

    - name: Enable Terminal Services
      run: Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -name "fDenyTSConnections" -Value 0

    - name: Enable Remote Desktop Firewall Rule
      run: Enable-NetFirewallRule -DisplayGroup "Remote Desktop"

    - name: Configure RDP User Authentication
      run: Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "UserAuthentication" -Value 1

    - name: Set Local User Password
      run: Set-LocalUser -Name "runneradmin" -Password (ConvertTo-SecureString -AsPlainText "P@ssw0rd!" -Force)

    - name: Create ngrok Tunnel and Fetch Endpoint
      id: create_tunnel
      run: |
        Start-Process -NoNewWindow -FilePath .\ngrok\ngrok.exe -ArgumentList "tcp 3389" -PassThru
        Start-Sleep -Seconds 10 # Give ngrok a few seconds to start
        $endTime = (Get-Date).AddHours(7)
        while ((Get-Date) -lt $endTime) {
          try {
            $response = Invoke-RestMethod http://127.0.0.1:4040/api/tunnels
            $endpoint = $response.tunnels[0].public_url
            Write-Output "ngrok public URL: $endpoint"
            echo "NGROK_URL=$endpoint" >> $GITHUB_ENV
            break
          } catch {
            Write-Host "Failed to fetch ngrok endpoint."
          }
          Start-Sleep -Seconds 60 # Wait for a minute before checking again
        }
        Write-Host "The 7-hour period has ended."

    - name: Output ngrok URL
      run: echo "ngrok public URL: ${{ env.NGROK_URL }}"
