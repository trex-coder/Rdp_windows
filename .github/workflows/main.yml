name: CI

on: [push, workflow_dispatch]

jobs:

  build:

    runs-on: windows-latest

    steps:
    - name: Download Ngrok
      run: Invoke-WebRequest https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip -OutFile ngrok.zip

    - name: Extract Ngrok
      run: Expand-Archive ngrok.zip

    - name: Auth Ngrok
      run: .\ngrok\ngrok.exe authtoken $Env:NGROK_AUTH_TOKEN
      env:
        NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}

    - name: Enable TS
      run: Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -name "fDenyTSConnections" -Value 0

    - name: Enable RDP Firewall
      run: Enable-NetFirewallRule -DisplayGroup "Remote Desktop"

    - name: Enable RDP User Authentication
      run: Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "UserAuthentication" -Value 1

    - name: Set Admin Password
      run: Set-LocalUser -Name "runneradmin" -Password (ConvertTo-SecureString -AsPlainText "P@ssw0rd!" -Force)

    - name: Download TigerVNC
      run: |
        $url = "https://downloads.sourceforge.net/project/tigervnc/stable/1.13.1/TigerVNC-1.13.1.exe"
        $output = "tigervnc.exe"
        $attempts = 3
        while ($attempts -gt 0) {
            Invoke-WebRequest $url -OutFile $output
            if (Test-Path $output -and (Get-Item $output).Length -gt 0) { break }
            $attempts--
        }
        if ($attempts -eq 0) { throw "Failed to download TigerVNC after multiple attempts." }

    - name: Verify Download
      run: |
        $expectedHash = "1b8708b6b5d4e8928301787ac307254a29c7f6dc1223071776315ae6f7c87b20" # Replace with actual hash
        $fileHash = (Get-FileHash -Path tigervnc.exe -Algorithm SHA256).Hash
        if ($fileHash -ne $expectedHash) { throw "TigerVNC download is corrupted." }

    - name: Install TigerVNC
      run: |
        try {
            Start-Process -Wait -FilePath .\tigervnc.exe -ArgumentList "/S"
        } catch {
            throw "Installation failed: $($_.Exception.Message)"
        }

    - name: Configure VNC Password
      run: |
        mkdir -Force "$Env:UserProfile\.vnc"
        echo "P@ssw0rd!" | Out-File -Encoding ascii "$Env:UserProfile\.vnc\passwd"
        & "C:\Program Files\TigerVNC\vncpasswd.exe" -f < "$Env:UserProfile\.vnc\passwd" > "$Env:UserProfile\.vnc\passwdfile"

    - name: Start VNC Server
      run: Start-Process -NoNewWindow -FilePath "C:\Program Files\TigerVNC\vncserver.exe" -ArgumentList ":1"

    - name: Create Ngrok Tunnel
      run: .\ngrok\ngrok.exe tcp 3389
