name: CI

on: [push, workflow_dispatch]

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Download ngrok
      run: Invoke-WebRequest https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip -OutFile ngrok.zip

    - name: Extract ngrok
      run: Expand-Archive ngrok.zip

    - name: Authenticate ngrok
      run: .\ngrok\ngrok.exe authtoken $Env:NGROK_AUTH_TOKEN
      env:
        NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}

    - name: Enable Terminal Services
      run: Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -name "fDenyTSConnections" -Value 0

    - name: Enable Remote Desktop Firewall Rule
      run: Enable-NetFirewallRule -DisplayGroup "Remote Desktop"

    - name: Configure RDP User Authentication
      run: Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "UserAuthentication" -Value 1

    - name: Set Local User Password
      run: Set-LocalUser -Name "runneradmin" -Password (ConvertTo-SecureString -AsPlainText "P@ssw0rd!" -Force)

    - name: Download Reemo
      run: |
        Write-Host "Downloading Reemo installer..."
        Invoke-WebRequest https://download.reemo.io/reemo.setup.x64.exe -OutFile reemo_installer.exe
        if (Test-Path -Path reemo_installer.exe) {
          Write-Host "Reemo installer downloaded successfully."
        } else {
          Write-Host "Failed to download Reemo installer."
          exit 1
          
    - name: Install Reemo
      run: |
        Write-Host "Starting Reemo installation..."
        $process = Start-Process -FilePath reemo_installer.exe -ArgumentList "/silent /log reemo_install.log" -PassThru -Wait
        $process.WaitForExit()
        
        if ($process.HasExited) {
          Write-Host "Reemo installation completed with exit code $($process.ExitCode)."
        } else {
          Write-Host "Reemo installation did not complete within the timeout period."
          $process.Kill()
          exit 1
        }
        
        # Check if the installer log exists
        if (Test-Path -Path reemo_install.log) {
          Write-Host "Reemo installation log:"
          Get-Content reemo_install.log | Write-Host
        } else {
          Write-Host "Reemo installation log not found."
        }

    - name: Verify Reemo Installation
      run: |
        if (Test-Path "C:\Program Files\Reemo\ReemoClient.exe") {
          Write-Host "Reemo installed successfully."
        } else {
          Write-Host "Reemo installation failed."
          exit 1

    - name: Configure Reemo with Personal Key
      run: |
        $personalKey = $Env:REEMO_PERSONAL_KEY
        & "C:\Program Files\Reemo\ReemoClient.exe" --register $personalKey
      env:
        REEMO_PERSONAL_KEY: ${{ secrets.REEMO_PERSONAL_KEY }}

    - name: Create ngrok Tunnel and Fetch Endpoint
      run: |
        Start-Process -NoNewWindow -FilePath .\ngrok\ngrok.exe -ArgumentList "tcp 3389" -PassThru
        Start-Sleep -Seconds 10 # Give ngrok a few seconds to start
        $endTime = (Get-Date).AddHours(7)
        $webhookUrl = $Env:DISCORD_WEBHOOK_URL
        while ((Get-Date) -lt $endTime) {
          try {
            $response = Invoke-RestMethod http://127.0.0.1:4040/api/tunnels
            $endpoint = $response.tunnels[0].public_url
            Write-Host "ngrok public URL: $endpoint"
            $randomCode = -join ((48..57) + (65..90) + (97..122) | Get-Random -Count 9 | % {[char]$_})
            Write-Host "Random Code: $randomCode"
            $payload = @{
              content = "ngrok public URL: $endpoint`nRandom Code: $randomCode"
            } | ConvertTo-Json
            Invoke-RestMethod -Uri $webhookUrl -Method Post -Body $payload -ContentType 'application/json'
          } catch {
            Write-Host "Failed to fetch ngrok endpoint or send to webhook."
          }
          Start-Sleep -Seconds 60 # Wait for a minute before checking again
        }
        Write-Host "The 7-hour period has ended."
      env:
        DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
